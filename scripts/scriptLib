#!/usr/bin/env bash

# Copyright (C) Lightbend Inc. <https://www.lightbend.com>

# Lib for CI scripts

set -e
set -o pipefail

DIR=$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )
BASEDIR=$DIR/..
export DOCUMENTATION=$BASEDIR/documentation

export CURRENT_BRANCH=${TRAVIS_BRANCH}

printMessage() { echo -e "\033[33;1m[info] ---- $1\033[0m"; }
start() { echo -e "travis_fold:start:$1\033[33;1m[info] ---- $2\033[0m"   ; }
end()   { echo -e "\ntravis_fold:end:$1\r\033[32;1m[info] ---- $2\033[0m" ; }

runSbt() {
  sbt "$AKKA_VERSION_OPTS" "$AKKA_HTTP_VERSION_OPTS" 'set Global / concurrentRestrictions += Tags.limitAll(1)' "$@" | grep --line-buffered -v 'Resolving \|Generating '
}

# Runs code formating validation in the current directory
scalafmtValidation() {
  start validate-scalafmt "VALIDATE SCALA CODE FORMATTING"
  runSbt +scalafmtCheckAll scalafmtSbtCheck || (
    echo "[error] ERROR: Scalafmt test failed for $1 source."
    echo "[error] To fix, format your sources using 'sbt scalafmtAll scalafmtSbt' before submitting a pull request."
    false
  )
  ret=$?
  end validate-scalafmt "VALIDATED SCALA CODE FORMATTING"
  return $ret
}

# Runs code formating validation in the current directory
javafmtValidation() {
  start validate-javafmt "VALIDATE JAVA CODE FORMATTING"
  runSbt javafmtCheckAll || (
    echo "[error] ERROR: javafmt check failed for $1 source."
    echo "[error] To fix, format your sources using 'sbt javafmtAll' before submitting a pull request."
    false
  )
  ret=$?
  end validate-javafmt "VALIDATE JAVA CODE FORMATTING"
  return $ret
}

if [ "$TRAVIS" = "true" ]; then
  start debug-env "SHOW FILES RELEVANT FOR THIS JOB AND ALL ENV VARIABLES"
  echo "$ cat /etc/sbt/jvmopts"
  cat /etc/sbt/jvmopts
  echo ""
  echo "$ cat /etc/sbt/sbtopts"
  cat /etc/sbt/sbtopts
  echo ""
  echo "$ env"
  env
  end debug-env "SHOWED FILES RELEVANT FOR THIS JOB AND ALL ENV VARIABLES"
fi
